import PostService from './post.service.js';
import ResponseUtils from '../../utils/response_utils.js';
import { PostStatus } from '../../utils/enum.common.js';
const createPostController=async(req,res,next)=>{
    try{
        console.log(req.body);
          // L·∫•y data ƒë√£ parse t·ª´ validation
        const postData = req.body.parsedData;

        // L·∫•y URL ·∫£nh t·ª´ Cloudinary (multer ƒë√£ upload)
        const imageUrls = req.files.map(file => file.path);
        
          // Th√™m imageUrls v√†o postData
        postData.images = imageUrls;

        const result = await PostService.createPost(postData);
        return ResponseUtils.successResponse(res, null, 'T·∫°o b√†i vi·∫øt th√†nh c√¥ng');
    }catch(error){
        if(error.message==='User not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }
        if(error.message==='Province not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë');
        }
        if(error.message==='Ward not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y x√£/ph∆∞·ªùng');
        }
        if(error.message==='Category not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m');
        }
        console.log(error);
        return ResponseUtils.serverErrorResponse(res);
    }
}

const updatePostByIdController=async(req,res,next)=>{
    try{
        const postData=req.body.parsedData;
        if (req.files && Array.isArray(req.files) && req.files.length > 0) {
            const imageUrls = req.files.map(file => file.path);
            postData.images = imageUrls;
        }
        const post=await PostService.updatePost(postData);
        
        post.images=post.images?post.images.split(','):[];
        post.categories=post.categories?post.categories.split(','):[];
        
        return ResponseUtils.successResponse(res,post,'C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng');
    }catch(error){
        if(error.message==='Post not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt');
        }
        if(error.message==='Province not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë');
        }
        if(error.message==='Ward not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y x√£/ph∆∞·ªùng');
        }
        if(error.message==='Category not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m');
        }
        console.log(error);
        return ResponseUtils.serverErrorResponse(res);
    }
}

const getDetailByPostIdController=async(req,res,next)=>{
    try{
        const postId=req.params.postId;
        const userId=req.query.userId;
        const post=await PostService.getDetailByPostId(postId,userId);
        
        post.images=post.images?post.images.split(','):[];
        post.categories=post.categories?post.categories.split(','):[];
        
        return ResponseUtils.successResponse(res,post,'L·∫•y th√¥ng tin b√†i vi·∫øt th√†nh c√¥ng');
    }catch(error){
        if(error.message==='Post not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt');
        }
        if(error.message==='User not found'){
            return ResponseUtils.notFoundResponse(res,'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        }
        console.log(error);
        return ResponseUtils.serverErrorResponse(res);
    }
}

const searchPostController=async(req,res,next)=>{
    try{
        const page = Number(req.query.page) || 0;     // m·∫∑c ƒë·ªãnh 0
        const limit = Number(req.query.size) || 10;  // m·∫∑c ƒë·ªãnh 10
        const post=await PostService.searchPost(req.body,page,limit);

        post.content=post.content.map((item)=>{
            item.images=item.images?item.images.split(','):[];
            item.categories=item.categories?item.categories.split(','):[];
            return item;
        });

        return ResponseUtils.successResponse(res,post,'L·∫•y danh s√°ch b√†i vi·∫øt th√†nh c√¥ng');


    }catch(error){
        if(error.message==='Province not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë');
        }
        if(error.message==='Ward not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y x√£/ph∆∞·ªùng');
        }
        if(error.message==='Status not found'){
            return ResponseUtils.notFoundResponse(res,'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá');
        }
        if(error.message==='User not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }
        if(error.message==='Category not found'){
            return ResponseUtils.notFoundResponse(res,'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m');
        }
        if(error.message==='Category ID is not an array'){
            return ResponseUtils.notFoundResponse(res,'C·∫ßn truy·ªÅn m·∫£ng danh m·ª•c s·∫£n ph·∫©m');
        }
        
        console.log(error);
        return ResponseUtils.serverErrorResponse(res);
    }
}

const updateStatusPostController=async(req,res,next)=>{
    try{
        const role=req.user.role;
        const postId=req.params.postId;
        const {status,reasonReject,reasonViolation, violationId}=req.body;

        if((status===PostStatus.VIOLATION || status===PostStatus.REJECTED) && role!=1){
            return ResponseUtils.validationErrorResponse(res,'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i n√†y');
        }
        const post=await PostService.updateStatusPostService(postId,status,reasonReject,reasonViolation,violationId);
        return ResponseUtils.successResponse(res,null,'C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i vi·∫øt th√†nh c√¥ng');
    }catch(error){
        const message = error.message;

    // üîç B·∫Øt l·ªói x√°c ƒë·ªãnh
    const errorMap = {
      'Post not found': ['notFoundResponse', 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'],
      'Status not found': ['validationErrorResponse', 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'],
      'Violation not found': ['validationErrorResponse', 'Kh√¥ng t√¨m th·∫•y n·ªôi dung vi ph·∫°m'],
    };

    // üéØ N·∫øu l√† l·ªói chuy·ªÉn tr·∫°ng th√°i (Invalid transition)
    if (message.startsWith('Invalid transition')) {
      const [, from, to] = message.match(/from (\w+) to (\w+)/) || [];

      // Map chi ti·∫øt t·ª´ng c·∫∑p chuy·ªÉn tr·∫°ng th√°i
      const transitionMessages = {
        [`${PostStatus.APPROVED}->${PostStatus.PENDING}`]: 'B√†i vi·∫øt ƒë√£ duy·ªát kh√¥ng th·ªÉ chuy·ªÉn v·ªÅ ch·ªù duy·ªát.',
        [`${PostStatus.APPROVED}->${PostStatus.REJECTED}`]: 'Kh√¥ng th·ªÉ t·ª´ ch·ªëi b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c duy·ªát.',
        [`${PostStatus.REJECTED}->${PostStatus.APPROVED}`]: 'B√†i b·ªã t·ª´ ch·ªëi c·∫ßn g·ª≠i l·∫°i (PENDING) tr∆∞·ªõc khi ƒë∆∞·ª£c duy·ªát.',
        [`${PostStatus.VIOLATION}->${PostStatus.PENDING}`]: 'B√†i vi·∫øt vi ph·∫°m kh√¥ng th·ªÉ g·ª≠i l·∫°i.',
        [`${PostStatus.VIOLATION}->${PostStatus.APPROVED}`]: 'B√†i vi·∫øt vi ph·∫°m kh√¥ng th·ªÉ ƒë∆∞·ª£c duy·ªát l·∫°i.',
        [`${PostStatus.HIDDEN}->${PostStatus.PENDING}`]: 'B√†i vi·∫øt b·ªã ·∫©n kh√¥ng th·ªÉ chuy·ªÉn sang ch·ªù duy·ªát.',
        [`${PostStatus.PENDING}->${PostStatus.HIDDEN}`]: 'Kh√¥ng th·ªÉ ·∫©n b√†i khi ƒëang ch·ªù duy·ªát.',
        [`${PostStatus.PENDING}->${PostStatus.PENDING}`]: 'B√†i vi·∫øt ƒë√£ ·ªü tr·∫°ng th√°i ch·ªù duy·ªát.',
        [`${PostStatus.PENDING}->${PostStatus.VIOLATION}`]: 'B√†i vi·∫øt ch∆∞a duy·ªát kh√¥ng th·ªÉ vi ph·∫°m.',
      };

      const key = `${from}->${to}`;
      const friendlyMessage = transitionMessages[key] || `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ ${from} sang ${to}.`;
      return ResponseUtils.validationErrorResponse(res, friendlyMessage);
    }

    // üß† C√°c l·ªói th√¥ng th∆∞·ªùng kh√°c
    const match = errorMap[message];
    if (match) {
      const [method, msg] = match;
      return ResponseUtils[method](res, msg);
    }

    // ‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh
    return ResponseUtils.serverErrorResponse(res, 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.');
    }
}

export default {createPostController,getDetailByPostIdController,updatePostByIdController,searchPostController,updateStatusPostController}